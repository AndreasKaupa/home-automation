emFORMAT: 1A
HOST: http://r3bfish.ddns.net:8083/ZAutomation/api

# Z-Way API

+ Allowed HTTPs requests:
	+ POST	  To create resource
	+ PUT	   To update resource
	+ GET	   Get a resource or list of resources
	+ DELETE	To delete resource

+ Allow get parameters
	+ suppress_response_codes (optional, boolean) ... If this parameter is present, all responses will be returned with a 200 OK status code - even errors. This parameter exists to accommodate Flash and JavaScript applications running in browsers that intercept all non-200 responses. If used, itâ€™s then the job of the client to determine error states by parsing the response body. Use with caution, as those error messages may change.
	+ pagination (optional, boolean) ... If this parameter is present, all response of the lists (Devices, Notifications) will be included pagination  
	+ limit (optional, number) ... If this parameter is present, then set limit models per page, else set default 10 models per page
	+ offset (options, number) ... If this parameter is present, then set start point models in page, else set default offset 0.
	+ fields (options, string) ... example: nameField1,nameField2,...

+ Status codes,
	+ 200:  "200 OK",
	+ 201:  "201 Created",
	+ 204:  "204 No Content",
	+ 304:  "304 Not Modified",
	+ 400:  "400 Bad Request",
	+ 401:  "401 Unauthorized",
	+ 403:  "403 Forbidden",
	+ 404:  "404 Not Found",
	+ 405:  "405 Method Not Allowed",
	+ 500:  "500 Internal server error",
	+ 501:  "501 Not Implemented"
	+ 503:  "503 Service Unavailable"
	

# Group Platform Availability 
<a id="available" ></a>

It will return 503 with Error message (see the details below). You can also use **/v1/status** resource to check the Platform availability.

## /v1/status
### GET
Resource for checking the Platform availability.

+ Request

	+ Headers

			Accept: application/json


+ Response 200

	+ Headers
	
			Content-Type: application/json

	+ Body 
	
			{
				error: null,
				data: "OK",
				code: 200
			}
			
	+ Schema

			{
				"type": "object",
				"required": false,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
	
+ Response 503

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				error: "Internal server error. Please fill in bug report with request_id='" + this.error + "'",
				data: null,
				code: 503,
				message: "Service Unavailable"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}

# Group Platform Restart
<a id="available" ></a>

You can use **/v1/restart** to restart the controller. This will reload all notifications, ZAutomation API and reinitialize (not reload) all apps.

## /v1/restart
### GET
Platform Restart

+ Request

	+ Headers

			Accept: application/json


+ Response 200

	+ Headers
	
			Content-Type: application/json

	+ Body 
	
			{
				error: null,
				data: "OK",
				code: 200
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}


# Group Namespaces
<a id="available" ></a>

Namespaces is a collection of internal registered names and ids - e.g. for zway or virtual devices. 
This API is mostly used in apps to create custom filters for virtual device selection. The data is build during z-way controller start up. Virtual device namespaces are influenced by the following listener emits:
* **created** ... added to devices collection
* **removed** ... removed from devices collection
* **change:metrics:title** ... change name of virtual dev
* **change:permanently_hide** ... deactivate virtual device - not hidden and usable

The namespace structure of virtual devices depends on their device types an probe types. Please check chapter **[Devices](anchor-devices)** for more information.

###Methods
- **/v1/namespaces** - read all namespaces.
- **/v1/namespaces/zways** - zway namespaces.
- **/v1/namespaces/devices_all** - array of all registered virtual devices that includes deviceId and deviceName.
- **/v1/namespaces/{devices_DEVICETYPE}** - read namespaces of specific **device type** and show their **probe type** children.
- **/v1/namespaces/{devices_DEVICETYPE}.{PATH}** - use path to read namespaces of child probe types  from a specific device type.
- **/v1/namespaces/{devices_DEVICETYPE}.{PATH}.deviceId** - get an array of all deviceId's that lies under path endpoint.
- **/v1/namespaces/{devices_DEVICETYPE}.{PATH}.deviceName** - get an array of all deviceNames's lies under path endpoint.


## Namespaces Collection [/v1/namespaces]
### List all Namespaces [GET]

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: [
					{
						id: "zways",
						params: [
							{
								zwayName: "zway"
							}
						]
					},
					{
						id: "devices_battery",
						params: [
							{
								deviceId: "ZWayVDev_zway_7-0-128",
								deviceName: "Fibar Group Battery (7.0)"
							}
						]
					},
					{
						id: "devices_all",
						params: [
							{
								deviceId: "DummyDevice_12",
								deviceName: "Switch All On"
							},
							{
								deviceId: "DummyDevice_13",
								deviceName: "Tischlampe"
							},
							{
								deviceId: "DummyDevice_18",
								deviceName: "Deckenlampe"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-37",
								deviceName: "Smoke Sirene Switch"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-48-2",
								deviceName: "Smoke Sensor"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-48-8",
								deviceName: "Smoke Tamper Sensor"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-113-1-2-A",
								deviceName: "Smoke Alarm"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-113-7-3-A",
								deviceName: "Smoke Burglar Alarm"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-113-9-1-A",
								deviceName: "Smoke System Alarm"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-128",
								deviceName: "Fibar Group Battery (7.0)"
							},
							{
								deviceId: "Sonos_Device_Play_192.168.10.205_21",
								deviceName: "Sonos Play Wohnzimmer"
							},
							{
								deviceId: "Sonos_Device_Volume_192.168.10.205_21",
								deviceName: "Sonos Volume Wohnzimmer"
							}
						]
					},
					{
						id: "devices_switchBinary",
						params: [
							{
								deviceId: "DummyDevice_12",
								deviceName: "Switch All On"
							},
							{
								deviceId: "ZWayVDev_zway_7-0-37",
								deviceName: "Smoke Sirene Switch"
							},
							{
								deviceId: "Sonos_Device_Play_192.168.10.205_21",
								deviceName: "Sonos Play Wohnzimmer"
							}
						]
					},
					{
						id: "devices_switchMultilevel",
						params: [
							{
								deviceId: "DummyDevice_13",
								deviceName: "Tischlampe"
							},
							{
								deviceId: "DummyDevice_18",
								deviceName: "Deckenlampe"
							},
							{
								deviceId: "Sonos_Device_Volume_192.168.10.205_21",
								deviceName: "Sonos Volume Wohnzimmer"
							}
						]
					},
					{
						id: "devices_sensorBinary",
						params: {
							smoke: [
								{
									deviceId: "ZWayVDev_zway_7-0-48-2",
									deviceName: "Smoke Sensor"
								}
							],
							tamper: [
								{
									deviceId: "ZWayVDev_zway_7-0-48-8",
									deviceName: "Smoke Tamper Sensor"
								}
							],
							alarm: {
								smoke: [
									{
										deviceId: "ZWayVDev_zway_7-0-113-1-2-A",
										deviceName: "Smoke Alarm"
									}
								],
								burglar: [
									{
										deviceId: "ZWayVDev_zway_7-0-113-7-3-A",
										deviceName: "Smoke Burglar Alarm"
									}
								],
								system: [
									{
										deviceId: "ZWayVDev_zway_7-0-113-9-1-A",
										deviceName: "Smoke System Alarm"
									}
								]
							}
						}
					}
				],
				code: 200,
				message: "200 OK"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "array",
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error: "Namespaces array is null"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}

## Z-Way Namespaces Collection [/v1/namespaces/zways]
### List all Z-Way Namespaces [GET]

+ Response 200 (application/json)
	
	+ Body 

			{
				data: [
					{
						"zwayName": "zway"
					},
					{
						"zwayName": "zway_remote_1"
					},
					{
						"zwayName": "zway_remote_2"
					}
				],
				code: 200,
				message: "200 OK",
				error: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"data": {
						"type": "array",
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					},
					"error": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}

## Virtual Device Namespace Model  [/v1/namespaces/{devices_DEVICETYPE}.{PATH}.{deviceId,deviceName}]
### List specific namespaces [GET]
			
+ Parameters
	+ `devices_DEVICETYPE` (optional, string, `devices_sensorBinary`) ... get namespaces of all devices `devices_all` or by device type - e.g. `devices_switchBinary`, `devices_sensorBinary`, `devices_switchControl` ...
	+ PATH (optional, string, `alarm.smoke`) ... get namespaces of devices depending on their probe type - e.g. `smoke`, `alarm`, `alarm.smoke`
	+ deviceId (optional, string, `deviceId`) ... get an array with device ID's of all virtual child devices.
	+ deviceName (optional, string, `deviceName`) ... get an array with device names's of all virtual child devices.
	

+ Response 200 (application/json)
	
	+ Body 

			{
				data: {
					smoke: [
						{
							deviceId: "ZWayVDev_zway_7-0-48-2",
							deviceName: "Smoke Sensor"
						}
					],
					tamper: [
						{
							deviceId: "ZWayVDev_zway_7-0-48-8",
							deviceName: "Smoke Tamper Sensor"
						}
					],
					alarm: {
						smoke: [
							{
								deviceId: "ZWayVDev_zway_7-0-113-1-2-A",
								deviceName: "Smoke Alarm"
							}
						],
						burglar: [
							{
								deviceId: "ZWayVDev_zway_7-0-113-7-3-A",
								deviceName: "Smoke Burglar Alarm"
							}
						],
						system: [
							{
								deviceId: "ZWayVDev_zway_7-0-113-9-1-A",
								deviceName: "Smoke System Alarm"
							}
						]
					}
				},
				code: 200,
				message: "200 OK",
				error: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"properties": {
						"smoke": {
							"type": "array",
							"required": true
						},
						"tamper"
							"type": "array",
							"required": true
						},
						"alarm": {
							"type": "object",
							"properties": {
							"smoke": {
								"type": "array",
								"required": true
							},
							"burglar"
								"type": "array",
								"required": true
							},
							"system": {
								"type": "integer",
								"required": true
							}
						}
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error: "No namespaces found with this path: foobar"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
# Group Modules
<a id="available" ></a>

This API prepares the whole meta data of all registered modules and their instances. 

###Methods for:
#### Module Meta Data
- **/v1/modules** - read all module meta data.
- **/v1/modules/{module-id}** - get meta data of specific module

#### Module Handling
- **/v1/modules/install** - download and install module (.tar.gz/ .zip) from the given address.
- **/v1/modules/update** - download and overwrite module (.tar.gz/ .zip) from the given address. Reload JS and meta data of updated module.
- **/v1/modules/reset/{module-id}** - resets an updated module back to its preinstalled version. Module needs to be preinstalled by on current firmware.
- **/v1/modules/delete/{module-id}** - deletes a **non preinstalled** module and removes all its instances. Cannot be undone without doing backup before.
- **/v1/modules/reinitialize/{module-id}** - stops all instances of module, reloads JS and meta data and starts instances again - useful for module development.

#### Module Categories
- **/v1/modules/categories** - show all module categories
- **/v1/modules/categories/{category-id}** - list modules by category

#### Access to Online Store Groups 
- **/v1/modules/tokens** - create/read/update/delete tokens for online store group access.

## Module attributes

This is a list of all module attributes hand out by the api. Some of them are predefined by module.json and the rest is added by the controller after initialisation.

| Module Attributes| Type					 | Comment											|
|---------------|-----------------------------|----------------------------------------------------|
| `id`		  | _immutable_ (string, uniq)  | class name as unique identifier |
| `location`	| _immutable_ (string)		| path to file directory: /modules or /userModules |
| `className`   | _immutable_ (string)		| reference to class name from index.js |
| `hasReset`	| (boolean, false)			| indicator if module could be reseted |
| `created`	 | (boolean, false)			| indicator if an instance of a singleton module already exists |
| `dependencies`| (array, [])				 | id's of modules that are necessary to initiate this module |
| `singleton`   | (boolean, false)			| indicates if a module could have only one (singleton) or more running instances  |
| `category`	| (string)					| assign module to special category |
| `author`	  | (string)					| name of author |
| `homepage`	| (string, uri)			   | homepage (of author) |
| `icon`		| (string, uri)			   | custom icon field: looks in folder _/LOCATION/MODULENAME/htdocs/ICON-NAME.png_ |
| `version`	 | (string or number)		  | current version of module, format MAJOR.FEATURES.PATCHES ``0.0.0`` |
| `maturity`	| (string)					| shows maturity of a modules: _alpha, beta, gamma, ... or stable_ |
| `repository`  | (object)					| information about the repository where to find the module e.g. ``{"type": "git","source": "https://github.com/Z-Wave-Me/home-automation"}`` |
| `defaults`	| (object)					| defines default attributes (basic skeleton) of the module, also includes module title and description e.g. ``{"title": "AutoLock","description": "Electronic Doors typically move the dead bold of the door. [...]"``
} |
| `schema`	  | (object)					| defines formatting schema for UI transformation with Alpaca Forms |
| `options`	 | (object)					| defines view attributes of objects for UI transformation with Alpaca Forms |

More information about 'How to build a module?' you will find [here in this tutorial on developer.z-wave.me](http://developer.z-wave.me/?uri=help). Please check out [http://www.alpacajs.org/](http://www.alpacajs.org/) to learn more about Alpaca Forms and how you could use it to make your own modules for home automation.

## Modules Collection [/v1/modules]
### List all Modules [GET]

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: [
					{
						id: 'module-id',
						
					}
				],
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": ["array"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
## Module Model [/v1/modules/{module-id}]
### List Module Meta Data [GET]

+ Parameters
	+ module-id (required, string, `BatteryPolling`) ... class name of module from which meta data should be requested

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					"singleton": true,
					"dependencies": [
						"Cron"
					],
					"category": "basic_gateway_modules",
					"author": "Z-Wave.Me",
					"homepage": "http://razberry.z-wave.me",
					"icon": "icon.png",
					"moduleName": "BatteryPolling",
					"version": "2.0.1",
					"maturity": "stable",
					"repository": {
						"type": "git",
						"source": "https://github.com/Z-Wave-Me/home-automation"
					},
					"defaults": {
						"title": "Battery Polling",
						"description": "The battery polling will update the battery status by asking all battery-operated device once a week for a battery status update.. You can pick the day of the week and a warning level, when this module will send you a warning note.",
						"launchWeekDay": 0,
						"warningLevel": 20
					},
					"schema": {
						"type": "object",
						"properties": {
							"launchWeekDay": {
								"type": "number",
								"required": true,
								"enum": [
									-1,
									1,
									2,
									3,
									4,
									5,
									6,
									0
								]
							},
							"warningLevel": {
								"type": "select",
								"required": true,
								"enum": [
									5,
									10,
									15,
									20
								]
							}
						},
						"required": false
					},
					"options": {
						"fields": {
							"launchWeekDay": {
								"label": "Do battery polling on",
								"optionLabels": [
									"Every Day",
									"Monday",
									"Tuesday",
									"Wednesday",
									"Thursday",
									"Friday",
									"Saturday",
									"Sunday"
								]
							},
							"warningLevel": {
								"label": "Warning Level",
								"helper": "Warn if device's battery is below this level",
								"optionLabels": [
									"5%",
									"10%",
									"15%",
									"20%"
								]
							}
						}
					},
					"id": "BatteryPolling",
					"location": "modules/BatteryPolling",
					"hasReset": false
					},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": ["array"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}

+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error: "Instance 'module-id' not found"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
## Install Module [/v1/modules/install{?moduleUrl}]
### INSTALL [POST]

+ Parameters
	+ moduleUrl (required, string, `http://developer.z-wave.me/modules/ScheduledScene.tar.gz`) ... target download url

+ Request (application/json)
	
	+ Body 

			{
				error: null,
				data: {
						moduleUrl: "http://developer.z-wave.me/modules/ScheduledScene.tar.gz"
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"required": true,
						"properties": {
							"moduleUrl": {
								"type": "string",
								"required": true
							},
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}


+ Response 201 (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					key: "The app was successfully installed.",
					appendix: null
				},
				code: 201,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"; {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"appendix"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 409

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 409,
				message: "409 conflict",
				error: {
					key: "The app is already installed.",
					errorMsg: null
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: {
					key: "Failed to install the app.",
					errorMsg: null
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}

## Update Module [/v1/modules/update{?moduleUrl}]
### UPDATE [POST]

+ Parameters
	+ moduleUrl (required, string, `http://developer.z-wave.me/modules/ScheduledScene.tar.gz`) ... target download url
	
+ Request (application/json)
	
	+ Body 

			{
				error: null,
				data: {
						moduleUrl: "http://developer.z-wave.me/modules/ScheduledScene.tar.gz"
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"required": true,
						"properties": {
							"moduleUrl": {
								"type": "string",
								"required": true
							},
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					key: "The app was successfully updated.",
					appendix: null
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": ["array"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error: "Cannot find the app."
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string"],
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: {
					key: "Failed to update the app.",
					errorMsg: null
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
## Reset Module [/v1/modules/reset/{module-id}]
### RESET - works only if module was preinstalled by default [POST]

+ Parameters
	+ module-id (required, string, `ScheduledScene`) ... class name of module that should be reseted

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					key: "The app was successfully reseted.",
					appendix: "current_version"
						
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"appendix"
								"type": "string",
								"required": true
							}
						}
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error: {
					key: "App not found.",
					errorMsg: null
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
+ Response 412

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 412,
				message: "412 Precondition Failed",
				error: {
					key: "App is already reset.",
					errorMsg: null
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: {
					key: "There was an error during resetting the app 'module-id'. Maybe a server restart could solve this problem.",
					errorMsg: null
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
## Delete Module [/v1/delete/{module-id}]
### DELETE - works only with non preinstalled modules [DELETE]

+ Parameters
	+ module-id (required, string, `MultiButton`) ... class name of module that should deleted

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					key: "The app was successfully deleted",
					appendix: null
						
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"appendix"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error: {
					key: "App not found."
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: {
					key: "Failed to delete the app."
				}
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "object",
						"required": true,
						"properties": {
							"key": {
								"type": "string",
								"required": true
							},
							"errorMsg"
								"type": ["string", "null"],
								"required": true
							}
						}
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
## Reinitialize Module [/v1/reinitialize/{module-id}]   
### REINITIALIZE [GET]

+ Parameters
	+ module-id (required, string, `BatteryPolling`) ... class name of module that should be reinitialized

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: "Reinitialization of app 'module-id' successfull.",
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "string",
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not Found",
				error:  "App not found."
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string"],
						"required": true
					}
				}
			}
			
## Module Categories [/v1/modules/categories]
- **/v1/modules/categories** - show all module categories

## Module Categories [/v1/modules/categories/{category-id}]
- **/v1/modules/categories/{category-id}** - list modules by category

## Access to Online Store Groups [/v1/modules/tokens]
- **/v1/modules/tokens** - create/read/update/delete tokens for online store group access.
			
# Group Instances

An instance is an object that is derived from a modules class. The module itself is a predefined mask and allows to create custom or different instances of it. For example using the module **If > Then**:

1. If ``Switch A`` is ``ON`` > Set ``Dimmer A`` to level ``99``, ``Radio`` to level ``12``, switch ``Plug Media````ON``
2. If ``Switch A`` is ``OFF`` > Set ``Dimmer A`` to level ``0``, switch ``Radio````OFF``, switch ``Plug Media````ON``

Both instances are derived objects from the _IfThen()_ class of **If > Then** module. They have the same origin but different attributes and usage. This also means that one module could usually have one or more registered instances.

#### Singleton Instances:

If a module has the the attribute ``"singleton": true`` then it could only have one registered instance - called singleton. Singletons are useful to avoid unnecessary instantiations of one class, so for example the module **Z-Wave Network Access** is configured as singleton. This module is the interface between the z-way controller and the Smart Home UI. It makes no sence to add another instance of that module because the interface already exists. Also another instance could interfere with the existing one because their class isn't concipated to handle more than one.

#### Instances
- **/v1/instances** - get all instances or create new instance (POST).
- **/v1/instances/{module-name}** - get an array of all instances of one module.
- **/v1/instances/{instance-id}** - read/update/delete instances.

## Instances Collection [/v1/instances]   
### List all Instances [GET]

+ Response 200 (application/json)
	
	+ Body 

			{
				data: [
					{
						id: 2,
						moduleId: "Cron",
						params: {},
						active: true,
						title: "System Clock (CRON)",
						description: "Scheduler used by other modules.",
						creationTime: 1459769281,
						state: null,
						module: "System Clock (CRON)"
					}, {
						id: 3,
						moduleId: "InbandNotifications",
						params: {},
						active: true,
						title: "Inband Notifier",
						description: "Creates and records the presentation of events in the event list (Eventlog).",
						creationTime: 1459769281,
						state: null,
						module: "Inband Notifier"
					}, {
						id: 7,
						moduleId: "BatteryPolling",
						active: "true",
						title: "Battery Polling",
						description: "Set up an interval that regularly polls the battery status of a battery devices.",
						params: {
							launchWeekDay: 0,
							warningLevel: "20"
						},
						creationTime: 1459769281
					}
				],
				code: 200,
				message: "200 OK",
				error: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "array",
						"required": true
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}
			
+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: "Could not list Instances."
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}

### CREATE [POST]

+ Request (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					moduleId: "BatteryPolling",
					params: {
						launchWeekDay: 0,
						warningLevel: "20"
					}
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"required": true,
						"properties": {
							"moduleId": {
								"type": "string",
								"required": true
							},
							"params": {
								"type": "object",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}

+ Response 201 (application/json)
	
	+ Body 

			{
				error: null,
				data: [
					{
						moduleId: 'moduleId',
						
					}
				],
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"id": {
								"type": "integer",
								"required": true
							},
							"moduleId": {
								"type": "string",
								"required": true
							},
							"params": {
								"type": "object",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not found",
				error: "Module 'module-id' doesn't exist."
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}

+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: "Cannot instantiate module 'module-id'"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}
			
## Instance Collection by module id [/v1/instances/{module-id}]

List all instances that has the same module as origin.

+ Parameters
	+ module-id (required, string, `IfThen`) ... module id (class name) of parent module

### READ [GET]

+ Response 200 (application/json)
	
	+ Body 

		{
			"data": [
				{
					"instanceId": "0",
					"moduleId": "IfThen",
					"active": "true",
					"title": "All On",
					"params": {
						"sourceDevice": {
							"filterIf": "scene",
							"scene": {
								"device": "ZWayVDev_zway_Remote_39-0-0-1-S"
							}
						},
						"targets": [
							{
								"filterThen": "switchBinary",
								"switchBinary": {
									"target": "ZWayVDev_zway_13-0-37",
									"status": "on"
								}
							},
							{
								"filterThen": "switchBinary",
								"switchBinary": {
									"target": "Sonos_Device_Play_192.168.10.205_21",
									"status": "on"
								}
							}
						]
					},
					"id": 24,
					"creationTime": 1461152581
				},
				{
					"instanceId": "0",
					"moduleId": "IfThen",
					"active": true,
					"title": "All Off",
					"params": {
						"sourceDevice": {
							"filterIf": "scene",
							"scene": {
								"device": "ZWayVDev_zway_Remote_39-0-0-2-S"
							}
						},
						"targets": [
							{
								"filterThen": "switchBinary",
								"switchBinary": {
									"target": "Sonos_Device_Play_192.168.10.205_21",
									"status": "off"
								}
							}, {
								"filterThen": "switchBinary",
								"switchBinary": {
									"target": "DummyDevice_12",
									"status": "off"
								}
							}
						]
					},
					"id": 25,
					"creationTime": 1461152774
				}
			],
			"code": 200,
			"message": "200 OK",
			"error": null
		}
		
+ Response 404

	+ Headers
	
			Content-Type: application/json

	+ Body
	
		{
			"data": null,
			"code": 404,
			"message": "404 Not Found",
			"error": "Instance foobar is not found"
		}

## Instance Model [/v1/instances/{instance-id}]

| Instance Attributes| Type					 | Comment											|
|---------------|-----------------------------|----------------------------------------------------|
| `id`		  | _immutable_ (string, uniq)  | id of instance |
| `moduleId`	| _immutable_ (string)		| id of referenced module (classname) |
| `active`	  | (boolean, true)			 | marks instance as in-/active |
| `title`	   | (string)					| title of instance |
| `params`	  | (object, {})				| depends on module, includes all last configured parameters that could be entered through the module form |
| `creationTime`| (integer)				   | timestamp of creation time |

+ Parameters
	+ instance-id (required, string, `7`) ... id (number) of target instance

### READ [GET]

+ Response 200 (application/json)
	
	+ Body 

			{
				data: [
					{
						id: 7,
						moduleId: "BatteryPolling",
						active: "true",
						title: "Battery Polling",
						description: "Set up an interval that regularly polls the battery status of a battery devices.",
						params: {
							launchWeekDay: 0,
							warningLevel: "20"
						},
						creationTime: 1459769281
					}
				],
				code: 200,
				message: "200 OK",
				error: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "array",
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not found",
				error: "Instance 'instance-id' is not found"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}
			
			
### UPDATE [PUT]

+ Request (application/json)
	
	+ Body 

			{
				error: null,
				data: {
					moduleId: "BatteryPolling",
					title: "New name for BatteryPolling",
					params: {
						launchWeekDay: 5,
						warningLevel: "15"
					}
				},
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data": {
						"type": "object",
						"required": true,
						"properties": {
							"moduleId": {
								"type": "string",
								"required": true
							},
							"params": {
								"type": "object",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					}
				}
			}

+ Response 200 (application/json)
	
	+ Body 

			{
				error: null,
				data: [
					{
						id: 7,
						moduleId: "BatteryPolling",
						active: "true",
						title: "New name for BatteryPolling",
						description: "Set up an interval that regularly polls the battery status of a battery devices.",
						params: {
							launchWeekDay: 5,
							warningLevel: "15"
						},
						creationTime: 1459769281
					}
				],
				code: 200,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data" :{
						"type": "array",
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not found",
				error: "Instance 'instance-id' is not found"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}
			
+ Response 500

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 500,
				message: "500 Internal server error",
				error: "Cannot reconfigure module 'instance-id' config."
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}
			
### DELETE [DELETE]

+ Response 204 (application/json)
	
	+ Body 

			{
				error: null,
				data: null,
				code: 204,
				message: null
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data" :{
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
			
+ Response 404

	+ Headers
	
			Content-Type: application/json
		
	+ Body 
	
			{
				data: null,
				code: 404,
				message: "404 Not found",
				error: "Instance 'instance-id' is not found"
			}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": "string",
						"required": true
					},
					"data": {
						"type": ["string", "null"],
						"required": true
					},
					"code": {
						"type": "integer",
						"required": true
					},
					"message": {
						"type": "string",
						"required": true
					}
				}
			}

# Group Devices
The **Devices API** handles all actions of virtual devices in the gateway related to their origin or node (included device). To recognize all this API could be fetched immediately. Also sending commands to change levels etc. is is done by this API.

## Devices Collection [/v1/devices{?since}]

| Devices Data Attribute | Type	 | Comment				  |
|-------------------|---------------|--------------------------|
| `structureChanged`| (boolean)	 | indicates of structure of list has changed (virtual devices has been added or removed) |
| `updateTime`	  | (integer)	 | timestamp of last change |

### List all Devices  [GET]

+ Parameters
	+ since (optional, integer, `1459939093`) ... `updateTime` of the devices list.

+ Response 200 (application/json)

	+ Body
		{
			data: {
				structureChanged: true,
				updateTime: 1464761666,
				devices: [{
					creationTime: 1459939093,
					creatorId: 7,
					deviceType: "battery",
					h: -592588978,
					hasHistory: false,
					id: "BatteryPolling_7",
					location: 0,
					metrics: {
						probeTitle: "Battery",
						scaleTitle: "%",
						title: "Battery digest 7",
						level: 47,
						modificationTime: 1464684791,
						lastLevel: 47
					},
					permanently_hidden: false,
					probeType: "",
					tags: [],
					visibility: true,
					updateTime: 1464684791
				}, {
					creationTime: 1459947936,
					creatorId: 29,
					deviceType: "sensorBinary",
					h: 1303282175,
					hasHistory: false,
					id: "ZWayVDev_zway_2-0-48-1",
					location: 2,
					metrics: {
						probeTitle: "General purpose",
						scaleTitle: "",
						icon: "motion",
						level: "on",
						title: "Motion - Living Room",
						modificationTime: 1463116944,
						lastLevel: "on"
					},
					permanently_hidden: false,
					probeType: "general_purpose",
					tags: [],
					visibility: true,
					updateTime: 1464684789
				}, {
					creationTime: 1461244852,
					creatorId: 29,
					deviceType: "sensorMultilevel",
					h: 1303283136,
					hasHistory: false,
					id: "ZWayVDev_zway_2-0-49-1",
					location: 2,
					metrics: {
						probeTitle: "Temperature",
						scaleTitle: "Â°C",
						level: 24,
						icon: "temperature",
						title: "Temperature Door - Living Room",
						modificationTime: 1463128674,
						lastLevel: 24
					},
					permanently_hidden: false,
					probeType: "temperature",
					tags: [],
					visibility: true,
					updateTime: 1464684789
				}, {
					creationTime: 1461244853,
					creatorId: 29,
					deviceType: "sensorMultilevel",
					h: 1303283138,
					hasHistory: false,
					id: "ZWayVDev_zway_2-0-49-3",
					location: 2,
					metrics: {
						probeTitle: "Luminiscence",
						scaleTitle: "Lux",
						level: 130,
						icon: "luminosity",
						title: "Luminiscence - Living Room",
						modificationTime: 1463128674,
						lastLevel: 130
					},
					permanently_hidden: false,
					probeType: "luminosity",
					tags: [],
					visibility: true,
					updateTime: 1464684790
				}, {
					creationTime: 1459947935,
					creatorId: 29,
					deviceType: "battery",
					h: -927793024,
					hasHistory: false,
					id: "ZWayVDev_zway_2-0-128",
					location: 0,
					metrics: {
						probeTitle: "Battery",
						scaleTitle: "%",
						level: 100,
						icon: "battery",
						title: "Multisensor Battery - Living Room",
						modificationTime: 1463128674,
						lastLevel: 100
					},
					permanently_hidden: false,
					probeType: "",
					tags: [],
					visibility: true,
					updateTime: 1464684790
				}, {
					creationTime: 1461244852,
					creatorId: 29,
					deviceType: "sensorBinary",
					h: 1129728498,
					hasHistory: false,
					id: "ZWayVDev_zway_2-0-156-0-A",
					location: 2,
					metrics: {
						icon: "alarm",
						level: "on",
						title: "Motion Alarm - Living Room",
						modificationTime: 1462367037,
						lastLevel: "on"
					},
					permanently_hidden: false,
					probeType: "alarmSensor_general_purpose",
					tags: [],
					visibility: true,
					updateTime: 1464684790
				}, {
					creationTime: 1463037018,
					creatorId: 29,
					deviceType: "sensorMultilevel",
					h: -1332622515,
					hasHistory: false,
					id: "ZWayVDev_zway_18-0-49-1",
					location: 2,
					metrics: {
						probeTitle: "Temperature",
						scaleTitle: "Â°C",
						level: 25,
						icon: "temperature",
						title: "Temperature - Living Room",
						modificationTime: 1463116879,
						lastLevel: 25
					},
					permanently_hidden: false,
					probeType: "temperature",
					tags: [],
					visibility: true,
					updateTime: 1464684791
				}, {
					creationTime: 1463037018,
					creatorId: 29,
					deviceType: "switchBinary",
					h: -1503060958,
					hasHistory: false,
					id: "ZWayVDev_zway_18-0-64",
					location: 2,
					metrics: {
						icon: "thermostat",
						title: "Thermostat operation - Living Room",
						level: "on",
						modificationTime: 1463037070,
						lastLevel: "on"
					},
					permanently_hidden: false,
					probeType: "thermostat_mode",
					tags: [],
					visibility: true,
					updateTime: 1464684791
				}, {
					creationTime: 1463037019,
					creatorId: 29,
					deviceType: "thermostat",
					h: -1332564855,
					hasHistory: false,
					id: "ZWayVDev_zway_18-0-67-1",
					location: 2,
					metrics: {
						scaleTitle: "Â°C",
						level: 23.5,
						min: 5,
						max: 40,
						icon: "thermostat",
						title: "Thermostat - Living Room",
						modificationTime: 1463037973,
						lastLevel: 23.5
					},
					permanently_hidden: false,
					probeType: "thermostat_set_point",
					tags: [],
					visibility: true,
					updateTime: 1464684791
				}, {
					creationTime: 1460715630,
					creatorId: 21,
					deviceType: "switchBinary",
					h: 1606285100,
					hasHistory: false,
					id: "Sonos_Device_Play_192.168.10.205_21",
					location: 2,
					metrics: {
						title: "Sonos Play - Living Room",
						icon: "",
						level: "off",
						modificationTime: 1464619055,
						lastLevel: "off"
					},
					permanently_hidden: false,
					probeType: "",
					tags: [],
					visibility: true,
					updateTime: 1464760397
				}, {
					creationTime: 1460715630,
					creatorId: 21,
					deviceType: "switchMultilevel",
					h: 1810681234,
					hasHistory: false,
					id: "Sonos_Device_Volume_192.168.10.205_21",
					location: 2,
					metrics: {
						title: "Sonos Volume - Living Room",
						icon: "",
						level: 9,
						modificationTime: 1463640278,
						lastLevel: 9
					},
					permanently_hidden: false,
					probeType: "",
					tags: [],
					visibility: true,
					updateTime: 1464760397
				}]
			},
			code: 200,
			message: "200 OK",
			error: null
		}
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"updateTime": {
								"type": "integer",
								"required": true
							},
							"structureChanged": {
								"type": "boolean",
								"required": true
							},
							"devices": {
								"type": "array",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
		
## Virtual Device [/v1/devices/{id}]
A single virtual device object with all its details.

## Virtual Device Attributes

| Virtual Device Attribute	  | Type						| Comment									  |	  
|-----------------------|-----------------------------|----------------------------------------------|
| `id`				  | _immutable_ (string, uniq)  | unique identifier |
| `deviceType`		  | _immutable_ (string)		| major categorization of virtual device types, example _switchBinary_, _thermostat_, _sensorMultilevel_ etc.|
| `updateTime`		  | _immutable_ (integer)	   | timestamp of last update|
| `metrics`			 | (object)					| device parameters |
| `metrics.probeTitle`  | (string)					| title of probe, example: _Temperature_ |
| `metrics.scaleTitle`  | (string)					| title of scale, example: _%_, _LUX_, _Â°C_ etc. |
| `metrics.level`	   | (string or integer)		 | level, example: _5_, _21.4_, _on/off_, _ALARM_ etc. |
| `metrics.icon`		| (string)					| custom icon field, example: _uri, icon type_ |
| `metrics.title`	   | (string)					| current title, example: _Temperature Door - Living Room_ |
| `creationTime`		| (integer)				   | creation time timestamp |
| `creatorId`		   | (integer)				   | id of instance that has created the virtual device (Z-Way devices usually will be created from ZWave instance) |
| `hasHistory`		  | (boolean)				   | virtual device has a history |
| `permanently_hidden`  | (boolean)				   | virtual device is pemanently hidden (inactive) - not usable in apps etc. |
| `probeType`		   | _immutable_ (string)		| type of probe for deeper categorization, example: _temperature_ |
| `visibility`		  | (boolean)				   | hide virtual device in view (e.g. elements view) |
| `tags`				| (array)					 | list of tags assigned to virtual device |

## Virtual Device Types

| deviceType						|Metrics				   | Commands																					  | Examples																															|
|-----------------------------------|----------------------|-----------------------------------------------------------------------------------------------|-----------------------------------------------|
| battery						   | probeTitle,scaleTitle, level, icon, title | -																			 |-											  |
| doorlock						  | level, icon, title |**_open_** or **_close_**																			 |apiURL/devices/:deviceId/command/open		  |
| thermostat						| scaleTitle, min, max, level, icon, title |**_exact_** with get-param **_level_**										  |apiURL/devices/:deviceId/command/exact?level=22.5|
| switchBinary (Thermostat)		 | level, icon, title | **_on_**, **_off_** or **_update_**																  |apiURL/devices/:deviceId/command/on			|
| switchBinary					  | level, icon, title | **_on_**, **_off_** or **_update_**																  |apiURL/devices/:deviceId/command/on			|
| switchMultilevel				  | level, icon, title | **_on_** Set(255), **_off_** Set(0), **_min_** Set(10), **_max_** Set(99), **_increase_** Set(l+10), **_decrease_** Set(l-10), **_update_**, **_exact_** + get params **_level_**		|apiURL/devices/:deviceId/command/exact?level=40|
| switchMultilevel (Blinds)		 | level, icon, title | **_up_** Set(255), **_down_** Set(0), **_upMax_** Set(99), **_increase_** Set(l+10), **_decrease_** Set(l-10), **_startUp_** StartLevelChange(0), **_startDown_** StartLevelChange(1), **_stop_** StopLevelChange(), **_update_**, **_excactSmooth_** + get params **_level_**   |apiURL/devices/:deviceId/command/stop|
| sensorBinary					  | probeTitle, level, icon, title | **_update_**																			 |apiURL/devices/:deviceId/command/update		|
| sensorMultilevel				  | probeTitle, scaleTitle, level, icon, title | **_update_**																 |apiURL/devices/:deviceId/command/update		|
| toggleButton					  | level, icon, title | **_on_**																							 |apiURL/devices/:deviceId/command/on			|
| camera							| icon, title		| depends on installed camera - could be: **_zoomIn_**, **_zoomOut_**, **_up_**, **_down_**, **_left_**, **_right_**, **_close_**, **_open_** | apiURL/devices/:deviceId/zoomIn |
| switchControl					 | level, icon, title, change | **_on_**, **_off_**, **_upstart_**, **_upstop_**, **_downstart_**, **_downstop_**, **_exact_** with get-param **_level_**	| apiURL/devices/:deviceId/command/on |
| text							  | title, text, icon | - | - |
| sensorMultiline				   | multilineType, title, icon, level, (scaleTitle, ...) | depends on apps | apiURL/devices/:deviceId/command/:cmd |
| switchRGB						 | icon, title, color: {r:255,g:255,b:255}, level  | **_on_**, **_off_**, **_exact_** with get-params: **_red_**, **_green_** and **_blue_** | apiURL/devices/:deviceId/command/exact?red=20&green=240&blue=0 | 

## Probe Types (Z-Way)

| Command Class					 |Probe Types				| Sensor ID | Parent deviceType		 |
|-----------------------------------|---------------------------|-----------|---------------------------|
| ThermostatSetPoint				| `thermostat_set_point`	| -		 | thermostat				|
| ThermostatMode					| `thermostat_mode`		 | -		 | switchBinary			  |
| SwitchMultilevel				  | `multiLevel` <br> `motor` | default <br> 3,5,6,7 | switchMultilevel |
| SwitchColor (virtual device with RGB panel) | `switchColor_rgb` | - | switchRGB |
| SwitchColor					   | `switchColor_soft_white` <br> `switchColor_cold_white` <br> `switchColor_red` <br> `switchColor_green` <br> `switchColor_blue` | 0 <br> 1 <br> 2 <br> 3 <br> 4 | switchMultilevel |
| SensorBinary					  | `general_purpose` <br> `smoke` <br> `co` <br> `flood` <br> `cooling` <br> `tamper` <br> `door-window` <br> `motion` | default <br> 2 <br> 3,4 <br> 6 <br> 7 <br> 8 <br> 10 <br> 12 | sensorBinary |
| SensorMultilevel				  | `temperature` <br> `luminosity` <br> `energy` <br> `humidity` <br> `barometer` <br> `ultraviolet`| 1 <br> 3  <br> 4,15,16 <br> 5 <br> 9 <br> 27 | sensorMultilevel |
| Meter							 | `meterElectric_kilowatt_per_hour` <br> `meterElectric_watt` <br> `meterElectric_pulse_count` <br> `meterElectric_voltage` <br> `meterElectric_ampere` <br> `meterElectric_power_factor` | 0 <br> 2 <br> 3 <br> 4 <br> 5 <br> 6 | sensorMultilevel |
| Alarm							 | `alarm_general_purpose` <br> `alarm_smoke` <br> `alarm_co` <br> `alarm_coo` <br> `alarm_heat` <br> `alarm_flood` <br> `alarm_door` <br> `alarm_burglar` <br> `alarm_power` <br> `alarm_system` <br> `alarm_emergency` <br> `alarm_clock` | 0 <br> 1 <br> 2 <br> 3 <br> 4 <br> 5 <br> 6 <br> 7 <br> 8 <br> 9 <br> 10 <br> 11 | sensorBinary |
| AlarmSensor					   | `alarmSensor_general_purpose` <br> `alarmSensor_smoke` <br> `alarmSensor_co` <br> `alarmSensor_coo` <br> `alarmSensor_heat` <br> `alarmSensor_flood` <br> `alarmSensor_door` <br> `alarmSensor_burglar` <br> `alarmSensor_power` <br> `alarmSensor_system` <br> `alarmSensor_emergency` <br> `alarmSensor_clock` | 0 <br> 1 <br> 2 <br> 3 <br> 4 <br> 5 <br> 6 <br> 7 <br> 8 <br> 9 <br> 10 <br> 11 | sensorBinary |

Probe Types are used to allow deeper categorizations in the Namespaces API. If a virtual device has no probeType then the parameter will be empty `''`. You can also use probeType in your apps to differentiate between your virtual devices generated by them.	 

## Icon Types

**icon** attribute of **metrics** object may be:

| Icon Attribute								   |Comment
|--------------------------------------------------|--------------------------------------------|
| `''`											 | none|
| `url(uri)`									   | URL, example: http://image.com/image.png .|
| `relative url string`							| use home automation api to show pictures from app htdocs folder, example: `apiURL/modulemedia/:module_name/:file_name`|
| `switch`										 | for **switchBinary** deviceType.|
| `multilevel`, `blinds`						   | for **switchMultilevel** deviceType.|
| `smoke`, `co`, `cooling`, `door`, `motion`, `flood`, `alarm`, `window`	 | for **sensorBinary** deviceType.|
| `temperature`, `luminosity`, `energy`, `humidity`, `ultraviolet`, `barometer`   | for **sensorMultilevel** deviceType.|
| `battery`										| for **battery** deviceType.|
| `thermostat`									 | for **thermostat** deviceType.|
| `meter`										  | for **meter** deviceType.|
| `door`										   | for **doorlock** deviceType.|
| `doorlockcontrol`								| for **doorlock** deviceType.|
| `camera`										 | for **camera** deviceType.|

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the Device to perform action with.

### READ [GET]

Retrieve a virtual device

+ Response 200 (application/json)

	+ Body

		{
			"data": {
				"creationTime": 1464779507,
				"creatorId": 34,
				"deviceType": "sensorMultilevel",
				"h": 1303283138,
				"hasHistory": false,
				"id": "ZWayVDev_zway_2-0-49-3",
				"location": 0,
				"metrics": {
					"probeTitle": "Luminiscence",
					"scaleTitle": "Lux",
					"level": 130,
					"icon": "luminosity",
					"title": "Luminiscence - Living Room",
					"modificationTime": 1464779507,
					"lastLevel": 130
				},
				"permanently_hidden": false,
				"probeType": "luminosity",
				"tags": [],
				"visibility": true,
				"updateTime": 1464779507
			},
			"code": 200,
			"message": "200 OK",
			"error": null
		}

   + Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"creationTime": {
								"type": "integer",
								"required": true
							},
							"creatorId": {
								"type": "integer",
								"required": true
							},
							"deviceType": {
								"type": "string",
								"required": true
							},
							"hasHistory": {
								"type": "bolean"
								"required": false
							},
							"id": {
								"type": "integer",
								"required": true
							},
							"location": {
								"type": "integer",
								"required": true
							},
							"metrics": {
								"type": "object",
								"required": true
							},
							"permanently_hidden": {
								"type": "boolean"
								"required": true
							},
							"probeType": {
								"type": "integer",
								"required": false
							},
							"tags": {
								"type": "array",
								"required": false
							},
							"visibility": {
								"type": "boolean"
								"required": true
							},
							"updateTime": {
								"type": "integer"
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}

### UPDATE [PUT]

Update a virtual device

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the Device to perform action with.

+ Request (application/json)

	+ Body

			{
				"creationTime": 1464779507,
				"creatorId": 34,
				"deviceType": "sensorMultilevel",
				"h": 1303283138,
				"hasHistory": false,
				"id": "ZWayVDev_zway_2-0-49-3",
				"location": 0,
				"metrics": {
					"probeTitle": "Luminiscence",
					"scaleTitle": "Lux",
					"level": 130,
					"icon": "luminosity",
					"title": "Luminiscence - Living Room",
					"modificationTime": 1464779507,
					"lastLevel": 130
				},
				"permanently_hidden": false,
				"probeType": "luminosity",
				"tags": [],
				"visibility": true,
				"updateTime": 1464779507
			}
			
+ Response 200 (application/json)

	+ Body

			{
			"data": {
				"creationTime": 1464779507,
				"creatorId": 34,
				"deviceType": "sensorMultilevel",
				"h": 1303283138,
				"hasHistory": false,
				"id": "ZWayVDev_zway_2-0-49-3",
				"location": 0,
				"metrics": {
					"probeTitle": "Luminiscence",
					"scaleTitle": "Lux",
					"level": 130,
					"icon": "luminosity",
					"title": "Luminiscence - Living Room",
					"modificationTime": 1464779507,
					"lastLevel": 130
				},
				"permanently_hidden": false,
				"probeType": "luminosity",
				"tags": [],
				"visibility": true,
				"updateTime": 1464779507
			},
			"code": 200,
			"message": "200 OK",
			"error": null
		}
		
+ Response 404 (application/json)

	+ Body
	
		{
			data: null,
			code: 404,
			message: "404 Not found",
			error: "Device :id doesn't exist"
		}

## Devices Commands [/v1/devices/{id}/command/{command}{?params}]
### Send Command to Device [GET]
+ Response 200 (application/json)

	+ Body

			{
				"data": null,
				"code": 200,
				"message": "200 OK",
				"error": null
			}

# Group Locations
Locations related resources of the **Locations API**

## Locations Collection [/v1/locations]
### List all Locations [GET]

+ Response 200 (application/json)

	+ Body

			{
				"data":[
					{"id":6,"title":"Garage"},
					{"id":7,"title":"Hall"},
					{"id":8,"title":"Kids"},
					{"id":9,"title":"Kitchen"},
					{"id":10,"title":"Bedroom"},
					{"id":11,"title":"name123"},
					{"id":12,"title":"test"}
				],
				"error": null,
				"code": "200 OK",
				"message" null,
			}
		
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "array",
						"required": true
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
		
### CREATE [POST]

Create a Location

+ Request (application/json)
	
	+ Body
	
			{ "title": "Garage", "icon": "http://example.com/garage.png" }

	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"title": {
								"type": "string",
								"required": true
							},
							"icon": {
								"type": "string",
								"required": false
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}

+ Parameters
	+ title (required, string, `Garage`) ... `title` of the location.
	+ icon (optional, string, `http://example.com/garage.png`) ... `icon` of the location.

+ Response 201 (application/json)

	+ Body 
		
			{ "id": 1, "title": "Garage", "icon": "http://example.com/garage.png" }
		
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"id": {
								"type": "integer",
								"required": true
							},
							"title": {
								"type": "string",
								"required": true
							},
							"icon": {
								"type": "string",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}

## Location [/v1/locations/{id}]
A single Location object with all its details

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the Location to perform action with.

### READ [GET]

Retrieve a Location

+ Response 200 (application/json)

	+ Body

			{ "id": 2, "title": "Pick-up posters from post-office" }
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"title": {
								"type": "string",
								"required": true
							},
							"icon": {
								"type": "string",
								"required": false
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
			
### UPDATE [PUT]

Update a Location

+ Response 200 (application/json)

	+ Body

			{ "id": 2, "title": "Pick-up posters from post-office" }
			
	+ Schema

			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"title": {
								"type": "string",
								"required": true
							},
							"icon": {
								"type": "string",
								"required": false
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}

### DELETE [DELETE]

Remove a Location

+ Response 204

# Group Profiles
Profiles related resources of the **Profiles API**

## Profiles Collection [/v1/profiles]
### List all Profiles [GET]

+ Response 200 (application/json)

		[{
			"data":[
				"{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","widgets":[],"active":true}",
			],
			"error": null,
			"message": null,
			"code": "200 OK"
		}]
		
### CREATE [POST]

Create a Profile

+ Request (application/json)
   
		+ Body
		
				{ "name": "Default", "description": "descriptions", "active": false, "positions": []}
		
		+ Schema 
		
				{
					"type": "object",
					"required": true,
					"properties": {
						"error": {
							"type": ["string", "null"],
							"required": true
						},
						"data"
							"type": "object",
							"required": true,
							"properties": {
								"description": {
									"type": "string",
									"required": false,
								},
								"title": {
									"type": "string",
									"required": true
								},
								"positions": {
									"type": "array",
									"required": true
								},
								"active": {
									"type": "boolean",
									"required": true
								}
							}
						},
						"code": {
							"type": ["integer", "null"],
							"required": true
						},
						"message": {
							"type": ["string", "null"],
							"required": true
						},
					}
				}
		
+ Response 201 (application/json)

	+ Body

			{
				"data":[
					"{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","widgets":[],"active":true}",
				],
				"error": null,
				"message": null,
				"code": "200 OK"
			}

## Profile [/v1/profiles/{id}]
A single Profile object with all its details

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the Profile to perform action with.
	+ name (required, string, `Default`) ... `name` of the profile.
	+ description (optional, string, `description`) ... `description` of the profile.
	+ active (optional, boolean, `false`) ... `profile is activated`.
	+ positions (required, array, `[deviceId1, deviceId2]`) ... `show and sortable on dashboard`.

### READ [GET]

Retrieve a Profile

+ Response 200 (application/json)

	+ Body

			{
				"data":[
					{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","positions":[],"active":true},
				],
				"error": null,
				"message": null,
				"code": "200 OK"
			}
			
	+ Schema
	 
			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"id": {
								"type": "integer",
								"required": true
							},
							"title": {
								"type": "string",
								"required": true
							},
							"positions": {
								"type": "array",
								"required": true
							},
							"active": {
								"type": "boolean",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}
			
### Update a Profile [PUT]

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the Profile to perform action with.
	+ name (required, string, `Default`) ... `name` of the profile.
	+ description (optional, string, `description`) ... `description` of the profile.
	+ active (optional, boolean, `false`) ... `profile is activated`.
	+ positions (required, array, `[deviceId1, deviceId2]`) ... `show and sortable on dashboard`.


+ Response 200 (application/json)

	+ Body

			{
				"data":[
					"{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","widgets":[],"active":true}",
				],
				"error": null,
				"message": null,
				"code": "200 OK"
			}

	+ Schema
	 
			{
				"type": "object",
				"required": true,
				"properties": {
					"error": {
						"type": ["string", "null"],
						"required": true
					},
					"data"
						"type": "object",
						"required": true,
						"properties": {
							"title": {
								"type": "string",
								"required": true
							},
							"description": {
								"type": "string",
								"required": false
							},
							"positions": {
								"type": "array",
								"required": true
							},
							"active": {
								"type": "boolean",
								"required": true
							}
						}
					},
					"code": {
						"type": ["integer", "null"],
						"required": true
					},
					"message": {
						"type": ["string", "null"],
						"required": true
					},
				}
			}

### Remove a Profile [DELETE]
+ Response 204

# Group Notifications
Locations related resources of the **Notifications API**

## Notifications Collection [/v1/notifications{?since}]

### List all Notification  [GET]

+ Parameters
	+ redeemed = `false` (optional, boolean, `?redeemed=true`) ... if `redeemed` eq true - include redeemed notifications
	+ since (optional, integer, `?since=1387881635`) ... `updateTime` of the Notifications.

+ Response 200 (application/json)

	+ Body
	
			{"error":null,
			  "data":{
				"updateTime":1387884437,
				"notifications":[
				  {"id":"1387199352223","timestamp":"2013-12-16T13:09:12.223Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true},
				  {"id":"1387200419730","timestamp":"2013-12-16T13:26:59.730Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}
				]
			  }
			}		
		
## Notification [/v1/notifications/{id}]
A single Notice object with all its details

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the notifications to perform action with.

### Retrieve a Notification [GET]
+ Response 200 (application/json)

	+ Body

			{"error":null,"data":{"id":1387202340396,"timestamp":"2013-12-16T13:59:00.396Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}}

### Update a Notification [PUT]

+ Parameters
	+ id (required, integer, `1`) ... Numeric `id` of the Notification to perform action with.

+ Request (application/json)

	+ Body

			{"id":1387202340396,"timestamp":"2013-12-16T13:59:00.396Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}

+ Response 200 (application/json)

	+ Body

			{"error":null,"data":{"id":1387202340396,"timestamp":"2013-12-16T13:59:00.396Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}}

# Group Device Histories
Device related resources of the **History API**

## Histories Collection [/v1/history]

### List all Device Histories  [GET]

+ Response 200 (application/json)

	+ Body
	
			{"error":null,
			  "data":{
				"updateTime":1387884437,
				"history":[
							{
							"id": "ZWayVDev_zway_3-0-48-1",
							"dT": "sensorBinary",
							"mH": [
									{
										"id": 1424185598,
										"t": "2015-02-17T15:06:38.404Z",
										"l": "on"
									},
									{
										"id": 1424185662,
										"t": "2015-02-17T15:07:42.382Z",
										"l": "off"
									}
								]
							},{
							"id": "ZWayVDev_zway_3-0-49-3",
							"dT": "sensorMultilevel",
							"mH": [
									{
										"id": 1424172352,
										"t": "2015-02-17T11:25:52.723Z",
										"l": "21"
									},
									{
										"id": 1424172382,
										"t": "2015-02-17T11:26:22.743Z",
										"l": "22"
									}
								]
							}
				]
			  }
			}		
		
## Device History [/v1/history/{id}{?since}]
A single device history object with all its details

+ Parameters
	+ id (optional, string, `/ZWayVDev_zway_3-0-48-1`) ... Device `id` of the device to perform action with.
	+ since (optional, integer, `?since=1424186368`) ... `updateTime` of the metrics change.

### Retrieve a single Device History [GET]
+ Response 200 (application/json)

	+ Body

			{
			"data": {
				"id": "ZWayVDev_zway_3-0-48-1",
				"since": 1424186368,
				"deviceHistory": [
							{
								"id": 1424186368,
								"t": "2015-02-17T15:19:28.698Z",
								"l": "off"
							},
							{
								"id": 1424186396,
								"t": "2015-02-17T15:19:56.806Z",
								"l": "on"
							},
							{
								"id": 1424186427,
								"t": "2015-02-17T15:20:27.238Z",
								"l": "off"
							},
							{
								"id": 1424187453,
								"t": "2015-02-17T15:37:33.410Z",
								"l": "on"
							}
					]
				},
			"code": 200,
			"message": "200 OK",
			"error": null
			}
